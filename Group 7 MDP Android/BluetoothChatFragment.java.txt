
package com.example.android.MDP;

import android.app.ActionBar;
import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.MotionEventCompat;
import android.view.GestureDetector;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;
import android.widget.CompoundButton.OnCheckedChangeListener;

import com.example.android.MDP.R;
import com.example.android.common.logger.Log;

import java.util.ArrayList;

import static android.R.attr.delay;
import static android.R.attr.prompt;
import static android.R.id.toggle;
import static com.example.android.MDP.R.id.maze_map;
import static com.example.android.MDP.R.id.start;
import static com.example.android.MDP.R.id.toggleButton;

/**
 * This fragment controls Bluetooth to communicate with other devices.
 */
public class BluetoothChatFragment extends Fragment {


    private static final String TAG = "BluetoothChatFragment";
    // Map Grid Variable
    private int[] intArray = new int[300];
    private Maze canvas;
    public RelativeLayout map_rl;
    public Ulits ulits;
    private TextView robot_status_tv;
    ArrayList obstacleArray = new ArrayList();
    ArrayList exploredArray = new ArrayList();
    private String gridString = "GRID 20 15 -1 -1 -1 0 0"; //maxRow maxCol startRow startCol direction start
    public decoder decode=new decoder();
    //add c to send to aurdino, d to send to algo
    // The robot position
    int x, y;
    String direction;
    // Intent request codes
    private static final int REQUEST_CONNECT_DEVICE_SECURE = 1;
    private static final int REQUEST_CONNECT_DEVICE_INSECURE = 2;
    private static final int REQUEST_ENABLE_BT = 3;


    // Layout Views
    private ListView mConversationView;
    private EditText editX,editY;
    private Button mSendButton,mSendbuttonDwn,mSendButtonLeft,mSendButtonRight,mExplore,mFastest;
    private ToggleButton toggle,setpos;
    private Button btCmd, btCmd2;

    /**
     * Name of the connected device
     */
    private String mConnectedDeviceName = null;

    /**
     * Array adapter for the conversation thread
     */
    private ArrayAdapter<String> mConversationArrayAdapter;

    /**
     * String buffer for outgoing messages
     */
    private StringBuffer mOutStringBuffer;

    /**
     * Local Bluetooth adapter
     */
    private BluetoothAdapter mBluetoothAdapter = null;

    /**
     * Member object for the chat services
     */
    private BluetoothChatService mChatService = null;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setHasOptionsMenu(true);

        // Get local Bluetooth adapter
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

        // If the adapter is null, then Bluetooth is not supported
        if (mBluetoothAdapter == null) {
            FragmentActivity activity = getActivity();
            Toast.makeText(activity, "Bluetooth is not available", Toast.LENGTH_LONG).show();
            activity.finish();
        }
    }


    @Override
    public void onStart() {
        super.onStart();
        // If BT is not on, request that it be enabled.
        // setupChat() will then be called during onActivityResult
        if (!mBluetoothAdapter.isEnabled()) {
            Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableIntent, REQUEST_ENABLE_BT);
            // Otherwise, setup the chat session
        } else if (mChatService == null) {
            setupChat();
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (mChatService != null) {
            mChatService.stop();
        }
    }

    @Override
    public void onResume() {
        super.onResume();

        // Performing this check in onResume() covers the case in which BT was
        // not enabled during onStart(), so we were paused to enable it...
        // onResume() will be called when ACTION_REQUEST_ENABLE activity returns.
        if (mChatService != null) {
            // Only if the state is STATE_NONE, do we know that we haven't started already
            if (mChatService.getState() == BluetoothChatService.STATE_NONE) {
                // Start the Bluetooth chat services
                mChatService.start();
            }
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_bluetooth_chat, container, false);
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        mConversationView = (ListView) view.findViewById(R.id.in);

        mSendButton = (Button) view.findViewById(R.id.button_send);
        mSendbuttonDwn = (Button) view.findViewById(R.id.button9);
        mSendButtonLeft = (Button) view.findViewById(R.id.button10);
        mSendButtonRight = (Button) view.findViewById(R.id.button11);
         toggle = (ToggleButton) view.findViewById(R.id.toggleButton);
        setpos=(ToggleButton)view.findViewById(R.id.toggleButton2);
        editX=(EditText)view.findViewById(R.id.editText);
        editY=(EditText)view.findViewById(R.id.editText2);
        mExplore=(Button)view.findViewById(R.id.button);
        mFastest=(Button)view.findViewById(R.id.button2);

        btCmd = (Button) view.findViewById(R.id.btcmdbtn);
        btCmd2 = (Button) view.findViewById(R.id.btcmdbtn2);

        btCmd.setOnLongClickListener(new View.OnLongClickListener() {
            public boolean onLongClick(View v) {

                final EditText input = new EditText(getContext());
                LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.MATCH_PARENT);
                input.setLayoutParams(lp);
                // uncomment this line

                AlertDialog alertDialog = new AlertDialog.Builder(getContext()).create(); //Read Update
                alertDialog.setView(input);
                alertDialog.setTitle("Bluetooth Custom Command 1");
                alertDialog.setMessage("Enter the command string you wish to send below:");

                alertDialog.setButton("Save", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);
                        SharedPreferences.Editor editor = sharedPref.edit();
                        editor.putString("btcmd1", input.getText().toString());
                        editor.commit();
                        Toast.makeText(getActivity(), "Saved your command!", Toast.LENGTH_SHORT).show();
                    }
                });
                alertDialog.show();  //<-- See This!
                return true;
            }
        });

        btCmd.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);
                String customCmd = sharedPref.getString("btcmd1", "Not defined yet.");
                Toast.makeText(getActivity(), "Executing command\n" + customCmd, Toast.LENGTH_SHORT).show();
                sendMessage(customCmd);
            }
        });

        btCmd2.setOnLongClickListener(new View.OnLongClickListener() {
            public boolean onLongClick(View v) {

                final EditText input = new EditText(getContext());
                LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.MATCH_PARENT);
                input.setLayoutParams(lp);
                // uncomment this line

                AlertDialog alertDialog = new AlertDialog.Builder(getContext()).create(); //Read Update
                alertDialog.setView(input);
                alertDialog.setTitle("Bluetooth Custom Command 2");
                alertDialog.setMessage("Enter the command string you wish to send below:");

                alertDialog.setButton("Save", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);
                        SharedPreferences.Editor editor = sharedPref.edit();
                        editor.putString("btcmd2", input.getText().toString());
                        editor.commit();
                        Toast.makeText(getActivity(), "Saved your command!", Toast.LENGTH_SHORT).show();
                    }
                });
                alertDialog.show();  //<-- See This!
                return true;
            }
        });

        btCmd2.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);
                String customCmd = sharedPref.getString("btcmd2", "Not defined yet.");
                Toast.makeText(getActivity(), "Executing command\n" + customCmd, Toast.LENGTH_SHORT).show();
                sendMessage(customCmd);
            }
        });

        intArray = toIntArray(gridString);

        canvas = new Maze(this.getContext(), intArray);
        canvas.setClickable(false);
        canvas.setGridArray(intArray);
        canvas.stopThread();
        obstacleArray = new ArrayList();
        canvas.setObstacleArray(obstacleArray);
        canvas.setExploredArray(exploredArray);


        map_rl = (RelativeLayout)view.findViewById(R.id.maze_map);
        map_rl.addView(canvas);

    }


    /**
     * Set up the UI and background operations for chat.
     */
    private void setupChat() {
        Log.d(TAG, "setupChat()");

        // Initialize the array adapter for the conversation thread
        mConversationArrayAdapter = new ArrayAdapter<String>(getActivity(), R.layout.message);

        mConversationView.setAdapter(mConversationArrayAdapter);
        toggle.setOnCheckedChangeListener(new OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {
                if(isChecked){
                    canvas.startThread();
                    map_rl.setClickable(false);

                }
                    else{
                    canvas.stopThread();
                   map_rl.setClickable(true);
                }
            }
        });

       map_rl.setOnClickListener(new View.OnClickListener(){
           public void onClick(View v)
           {
               View view = getView();
               if(null!=view)
               {
                   map_rl.removeView(canvas);
                   map_rl.addView(canvas);
               }
           }
       });

        setpos.setOnCheckedChangeListener(new OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {
                if(isChecked){

                   editX.setVisibility(View.VISIBLE);
                    editY.setVisibility(View.VISIBLE);

                }
                else{
                    try {
                    String x,y;
                    x=editX.getText().toString();
                    int finalx=Integer.parseInt(x);
                    y=editY.getText().toString();
                    int finaly=Integer.parseInt(y);

                            startCoordinates(finalx ,finaly ,"1");
                            map_rl.removeView(canvas);
                            map_rl.addView(canvas);
                            editX.setVisibility(View.GONE);
                            editY.setVisibility(View.GONE);

                    }
                    catch(NumberFormatException e)
                    {
                        Toast.makeText(getActivity(), "Enter,X(0-15), Y(0-20)", Toast.LENGTH_SHORT).show();
                        editX.setVisibility(View.GONE);
                        editY.setVisibility(View.GONE);
                    }


                }
            }
        });
        // Initialize the compose field with a listener for the return key
       // mOutEditText.setOnEditorActionListener(mWriteListener);
        mExplore.setOnClickListener(new View.OnClickListener(){
            public void onClick(View v){
                View view = getView();
                if (null !=view)
                {
                    String message = "de|";

                    sendMessage(message);
                }
            }});
        mFastest.setOnClickListener(new View.OnClickListener(){
            public void onClick(View v){
                View view = getView();
                if (null !=view)
                {
                    String message = "ds|";

                    sendMessage(message);
                }
            }});
        //Reverse
        mSendbuttonDwn.setOnClickListener(new View.OnClickListener(){
        public void onClick(View v){
            View view = getView();
            if (null !=view)
            {
                String message = "cb|";
                canvas.Reverse();
                sendMessage(message);
            }
        }});
        // Initialize the send button with a listener that for click events
        mSendButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Send a message using content of the edit text widget
                View view = getView();
                if (null != view) {

                    String message = "cf|";
                canvas.moveForward();
                sendMessage(message);
            }
            }
        });
        mSendButtonLeft.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Send a message using content of the edit text widget
                View view = getView();
                if (null != view) {

                    String message = "cl|";
                    canvas.turnLeft();
                    sendMessage(message);
                }
            }
        });
        mSendButtonRight.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Send a message using content of the edit text widget
                View view = getView();
                if (null != view) {

                    String message = "cr|";
                    canvas.turnRight();
                    sendMessage(message);
                }
            }
        });
        map_rl.setOnTouchListener(new OnSwipeTouchListener() {
            @Override
            public void onSwipeLeft() {
                String message ="cl|";
                canvas.turnLeft();
                sendMessage(message);

            }
            public void onSwipeRight()
            {
                String message = "cr|";
                canvas.turnRight();
                sendMessage(message);
            }
            public void onSwipeTop()
            {
                String message = "cf|";
                canvas.moveForward();
                sendMessage(message);
            }
            public void onSwipeBottom()
            {
                String message = "cb|";
                canvas.Reverse();
                sendMessage(message);
            }
        });
        // Initialize the BluetoothChatService to perform bluetooth connections
        mChatService = new BluetoothChatService(getActivity(), mHandler);

        // Initialize the buffer for outgoing messages
        mOutStringBuffer = new StringBuffer("");
    }

    /**
     * Makes this device discoverable.
     */
    private void ensureDiscoverable() {
        if (mBluetoothAdapter.getScanMode() !=
                BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {
            Intent discoverableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
            discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);
            startActivity(discoverableIntent);
        }
    }


    /**
     * Sends a message.
     *
     * @param message A string of text to send.
     */
    public void sendMessage(String message) {
        // Check that we're actually connected before trying anything
        if (mChatService.getState() != BluetoothChatService.STATE_CONNECTED) {
            Toast.makeText(getActivity(), R.string.not_connected, Toast.LENGTH_SHORT).show();
            return;
        }

        // Check that there's actually something to send
        if (message.length() > 0) {
            // Get the message bytes and tell the BluetoothChatService to write
            byte[] send = message.getBytes();
            mChatService.write(send);

            // Reset out string buffer to zero and clear the edit text field
            mOutStringBuffer.setLength(0);
            //mOutEditText.setText(mOutStringBuffer);
        }
    }



    /**
     * The action listener for the EditText widget, to listen for the return key
     */
    private TextView.OnEditorActionListener mWriteListener
            = new TextView.OnEditorActionListener() {
        public boolean onEditorAction(TextView view, int actionId, KeyEvent event) {
            // If the action is a key-up event on the return key, send the message
            if (actionId == EditorInfo.IME_NULL && event.getAction() == KeyEvent.ACTION_UP) {
                String message = view.getText().toString();
                sendMessage(message);
            }
            return true;
        }
    };

    /**
     * Updates the status on the action bar.
     *
     * @param resId a string resource ID
     */
    private void setStatus(int resId) {
        FragmentActivity activity = getActivity();
        if (null == activity) {
            return;
        }
        final ActionBar actionBar = activity.getActionBar();
        if (null == actionBar) {
            return;
        }
        actionBar.setSubtitle(resId);
    }

    /**
     * Updates the status on the action bar.
     *
     * @param subTitle status
     */
    private void setStatus(CharSequence subTitle) {
        FragmentActivity activity = getActivity();
        if (null == activity) {
            return;
        }
        final ActionBar actionBar = activity.getActionBar();
        if (null == actionBar) {
            return;
        }
        actionBar.setSubtitle(subTitle);
    }

    /**
     * The Handler that gets information back from the BluetoothChatService
     */
    private final Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            FragmentActivity activity = getActivity();
            switch (msg.what) {
                case Constants.MESSAGE_STATE_CHANGE:
                    switch (msg.arg1) {
                        case BluetoothChatService.STATE_CONNECTED:
                            setStatus(getString(R.string.title_connected_to, mConnectedDeviceName));
                            mConversationArrayAdapter.clear();
                            break;
                        case BluetoothChatService.STATE_CONNECTING:
                            setStatus(R.string.title_connecting);
                            break;
                        case BluetoothChatService.STATE_LISTEN:{
                            int secs = 10; // Delay in seconds

                            ulits.delay(secs, new Ulits.DelayCallback(){

                                public void afterDelay() {
                                    //BluetoothDevice omg2 = mBluetoothAdapter.getRemoteDevice("00:02:72:3F:AD:68");
                                    //BluetoothDevice omg2 = mBluetoothAdapter.getRemoteDevice("18:4F:32:F7:DB:9A");
                                    //mChatService.connect(omg2,true);

                                    // Do something after delay

                                }
                            });
                        }

                        case BluetoothChatService.STATE_NONE:
                            setStatus(R.string.title_not_connected);
                            break;
                    }
                    break;
                case Constants.MESSAGE_WRITE:
                    byte[] writeBuf = (byte[]) msg.obj;
                    // construct a string from the buffer
                    String writeMessage = new String(writeBuf);
                    if (writeMessage.equals("cf|"))
                {
                    writeMessage="forward";

                    mConversationArrayAdapter.add("Status: " + writeMessage);
                }
                   else if (writeMessage.equals("cl|"))
                    {
                        writeMessage="rotate left";

                        mConversationArrayAdapter.add("Status: " + writeMessage);
                    }
                   else if (writeMessage.equals("cr|"))
                    {
                        writeMessage="rotate right";

                        mConversationArrayAdapter.add("Status: " + writeMessage);
                    }
                    else if (writeMessage.equals("cb|"))
                    {
                        writeMessage="Reverse";

                        mConversationArrayAdapter.add("Status: " + writeMessage);
                    }
                    else if (writeMessage.equals("de"))
                    {
                        writeMessage="Exploring";
                        mConversationArrayAdapter.add("Status: " + writeMessage);
                    }
                    else if (writeMessage.equals("ds"))
                    {
                        writeMessage="Finding Shortest path";
                        mConversationArrayAdapter.add("Status: " + writeMessage);
                    }

                    break;
                case Constants.MESSAGE_READ:
                    byte[] readBuf = (byte[]) msg.obj;
                    // construct a string from the valid bytes in the buffer
                    String readMessage = new String(readBuf, 0, msg.arg1);
                    mConversationArrayAdapter.add(mConnectedDeviceName + ":  " + readMessage);
                    //DECODING
                    if (readMessage.contains("g")) {
                        exploredArray = decode.decodeAMDGrid(readMessage);
                        obstacleArray = decode.decodeObstaclesGrid(readMessage, exploredArray);
                        String movement = decode.decodeMovement(readMessage);
                        updateObstacleArray(obstacleArray);
                        updateExploredArray(exploredArray);
                        // android.util.Log.d("WTF", String.valueOf(readMessage));
                        if (movement.contains("f")) {
                            int counter = 0;
                            int length = movement.length();
                            //android.util.Log.d("Counter", String.valueOf(length));
                            for (int i = 0; i < length; i++) {
                                if (movement.charAt(i) == 'f') {
                                    counter= Integer.parseInt(String.valueOf(movement.charAt(i+1)) ) ;
                                    while (counter != 0) {
                                        canvas.moveForward();
                                        counter--;
                                    }
                                }
                                else if (movement.charAt(i) == 'l') {
                                    canvas.turnLeft();
                                }
                                else if (movement.charAt(i) == 'r') {
                                    canvas.turnRight();
                                }
                            }
                        }
                        else if (movement.contains("r|")) {
                            canvas.turnRight();
                        } else if (movement.contains("l|")) {
                            canvas.turnLeft();
                        }
                    }
                    break;
                case Constants.MESSAGE_DEVICE_NAME:
                    // save the connected device's name
                    mConnectedDeviceName = msg.getData().getString(Constants.DEVICE_NAME);
                    if (null != activity) {
                        Toast.makeText(activity, "Connected to "
                                + mConnectedDeviceName, Toast.LENGTH_SHORT).show();
                    }
                    break;
                case Constants.MESSAGE_TOAST:
                    if (null != activity) {
                        Toast.makeText(activity, msg.getData().getString(Constants.TOAST),
                                Toast.LENGTH_SHORT).show();
                    }
                    break;
            }

        }
    };

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case REQUEST_CONNECT_DEVICE_SECURE:
                // When DeviceListActivity returns with a device to connect
                if (resultCode == Activity.RESULT_OK) {
                    connectDevice(data, true);
                }
                break;
            case REQUEST_CONNECT_DEVICE_INSECURE:
                // When DeviceListActivity returns with a device to connect
                if (resultCode == Activity.RESULT_OK) {
                    connectDevice(data, false);
                }
                break;

            case REQUEST_ENABLE_BT:
                // When the request to enable Bluetooth returns
                if (resultCode == Activity.RESULT_OK) {
                    // Bluetooth is now enabled, so set up a chat session
                    setupChat();
                } else {
                    // User did not enable Bluetooth or an error occurred
                    Log.d(TAG, "BT not enabled");
                    Toast.makeText(getActivity(), R.string.bt_not_enabled_leaving,
                            Toast.LENGTH_SHORT).show();
                    getActivity().finish();
                }
        }
    }

    /**
     * Establish connection with other divice
     *
     * @param data   An {@link Intent} with {@link DeviceListActivity#EXTRA_DEVICE_ADDRESS} extra.
     * @param secure Socket Security type - Secure (true) , Insecure (false)
     */
    private void connectDevice(Intent data, boolean secure) {
        // Get the device MAC address
        String address = data.getExtras()
                .getString(DeviceListActivity.EXTRA_DEVICE_ADDRESS);
        // Get the BluetoothDevice object
        BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
        // Attempt to connect to the device
        mChatService.connect(device, secure);
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        inflater.inflate(R.menu.bluetooth_chat, menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.secure_connect_scan: {
                // Launch the DeviceListActivity to see devices and do scan
                Intent serverIntent = new Intent(getActivity(), DeviceListActivity.class);
                startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE_SECURE);
                return true;
            }
            case R.id.insecure_connect_scan: {
                // Launch the DeviceListActivity to see devices and do scan
                Intent serverIntent = new Intent(getActivity(), DeviceListActivity.class);
                startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE_INSECURE);
                return true;
            }
            case R.id.discoverable: {
                // Ensure this device is discoverable by others
                ensureDiscoverable();
                return true;
            }

        }
        return false;
    }
    public int[] toIntArray(String s) {
        String[] stringArray = s.split(" ");
        int length = stringArray.length - 1;
        int[] intArray = new int[length];

        for (int i = 1; i <= length; i++) {
            intArray[i - 1] = Integer.parseInt(stringArray[i]);
            android.util.Log.d("Array", String.valueOf(intArray[i - 1]));
        }

        return intArray;
    }
    public void startCoordinates(int x, int y, String face) {
        int direction = -1;
        android.util.Log.d("Head of the robot", face);

        if (face.equals("R") || face.equals("1")) {
            direction = 1;

        } else if (face.equals("U") || face.equals("0")) {
            direction = 0;

        } else if (face.equals("D") || face.equals("2")) {
            direction = 2;

        } else if (face.equals("L") || face.equals("3")) {
            direction = 3;

        }

        //android.util.Log.d("Head of the robot", String.valueOf(direction));
        android.util.Log.d("x",String.valueOf(x));
        // send to AMD tool
        String message = "{\"robotPosition\" : [" + x + ", " + y + ", " + face + "]}";

        // send to Rpi
         //String message = x + "," + y + "," +face;

        sendMessage(message);
        canvas.startPosition(x, y, direction);
    }
    public void updateObstacleArray(ArrayList tempObstacleArray) {
        canvas.setObstacleArray(tempObstacleArray);
        canvas.updateMap();
    }
    public void updateExploredArray(ArrayList tempExploredArray)
    {
        canvas.setExploredArray((tempExploredArray));
        canvas.updateMap();
    }
    public class OnSwipeTouchListener implements View.OnTouchListener {

        private final GestureDetector gestureDetector = new GestureDetector(new GestureListener());

        public boolean onTouch(final View v, final MotionEvent event) {
            return gestureDetector.onTouchEvent(event);
        }

        private final class GestureListener extends GestureDetector.SimpleOnGestureListener {

            private static final int SWIPE_THRESHOLD = 100;
            private static final int SWIPE_VELOCITY_THRESHOLD = 100;


            @Override
            public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
                boolean result = false;
                try {
                    float diffY = e2.getY() - e1.getY();
                    float diffX = e2.getX() - e1.getX();
                    if (Math.abs(diffX) > Math.abs(diffY)) {
                        if (Math.abs(diffX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
                            if (diffX > 0) {
                                 onSwipeRight();
                            } else {
                               onSwipeLeft();
                            }
                        }
                    } else {
                        if (Math.abs(diffY) > SWIPE_THRESHOLD && Math.abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
                            if (diffY > 0) {
                                onSwipeBottom();
                            } else {
                                onSwipeTop();
                            }
                        }
                    }
                } catch (Exception exception) {
                    exception.printStackTrace();
                }
                return result;
            }
        }

        public void onSwipeRight() {

    }

        public void onSwipeLeft() {

        }

        public void onSwipeTop() {

        }

        public void onSwipeBottom() {

        }
    }


}
